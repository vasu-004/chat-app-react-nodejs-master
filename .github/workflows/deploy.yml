name: Full CI/CD Frontend + Backend

on:
  push:
    branches:
      - main
      - 'frontend/**'
      - 'backend/**'

jobs:
  frontend-build:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/frontend/')
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      S3_STATIC_BUCKET: ${{ secrets.S3_STATIC_BUCKET }}
      S3_IMAGE_BUCKET: ${{ secrets.S3_IMAGE_BUCKET }}
      CLOUDFRONT_DISTRIBUTION_COMMENT: "Frontend distribution for CI/CD"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Prepare environment and install dependencies
        run: |
          cd public
          mv .env.example .env
          yarn

      - name: Build project
        run: |
          cd public
          CI=false yarn build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload frontend build to S3
        run: |
          aws s3 sync public/build s3://$S3_STATIC_BUCKET --delete
          aws s3 sync public/images s3://$S3_IMAGE_BUCKET --delete

      - name: Block public access on S3 buckets
        run: |
          for BUCKET in $S3_STATIC_BUCKET $S3_IMAGE_BUCKET; do
            aws s3api put-public-access-block --bucket $BUCKET \
            --public-access-block-configuration '{
              "BlockPublicAcls": true,
              "IgnorePublicAcls": true,
              "BlockPublicPolicy": true,
              "RestrictPublicBuckets": true
            }'
          done

      - name: Create CloudFront distribution with two origins
        id: create_cloudfront
        run: |
          DIST_JSON=$(aws cloudfront create-distribution --distribution-config '{
            "CallerReference": "'"$(date +%s)"'",
            "Comment": "'"$CLOUDFRONT_DISTRIBUTION_COMMENT"'",
            "Enabled": true,
            "Origins": {
              "Quantity": 2,
              "Items": [
                {
                  "Id": "static-website",
                  "DomainName": "'"$S3_STATIC_BUCKET"'.s3.amazonaws.com",
                  "OriginPath": "",
                  "CustomOriginConfig": {
                    "HTTPPort": 80,
                    "HTTPSPort": 443,
                    "OriginProtocolPolicy": "http-only"
                  }
                },
                {
                  "Id": "images-bucket",
                  "DomainName": "'"$S3_IMAGE_BUCKET"'.s3.amazonaws.com",
                  "OriginPath": "",
                  "CustomOriginConfig": {
                    "HTTPPort": 80,
                    "HTTPSPort": 443,
                    "OriginProtocolPolicy": "http-only"
                  }
                }
              ]
            },
            "DefaultCacheBehavior": {
              "TargetOriginId": "static-website",
              "ViewerProtocolPolicy": "redirect-to-https",
              "ForwardedValues": {
                "QueryString": false,
                "Cookies": { "Forward": "none" }
              },
              "TrustedSigners": { "Enabled": false, "Quantity": 0 }
            },
            "OriginGroups": {
              "Quantity": 1,
              "Items": [
                {
                  "Id": "origin-group-1",
                  "FailoverCriteria": { "StatusCodes": { "Quantity": 1, "Items": [500] } },
                  "Members": { "Quantity": 2, "Items": [{"OriginId": "static-website"},{"OriginId": "images-bucket"}] }
                }
              ]
            }
          }')
          DIST_ID=$(echo $DIST_JSON | jq -r '.Distribution.Id')
          echo "CLOUDFRONT_DISTRIBUTION_ID=$DIST_ID" >> $GITHUB_ENV
          echo "Created CloudFront Distribution: $DIST_ID"

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  backend-build:
    needs: frontend-build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/backend/')
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_PRIVATE_URI: ${{ secrets.ECR_PRIVATE_URI }}
      ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
      ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
      IMAGE_TAG: ${{ github.sha }}
      TASK_ROLE_ARN: ${{ secrets.ECS_TASK_ROLE_ARN }}
      EXECUTION_ROLE_ARN: ${{ secrets.ECS_EXECUTION_ROLE_ARN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Show Docker version
        run: docker --version

      - name: Login to ECR Private
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_PRIVATE_URI

      - name: Build backend Docker image
        run: docker compose build --no-cache

      - name: Tag Docker image
        run: |
          docker tag react_backend_api:latest $ECR_PRIVATE_URI:$IMAGE_TAG
          docker tag react_backend_api:latest $ECR_PRIVATE_URI:latest

      - name: Push Docker image to ECR
        run: |
          docker push $ECR_PRIVATE_URI:$IMAGE_TAG
          docker push $ECR_PRIVATE_URI:latest

      - name: Ensure ECS cluster exists
        run: |
          if ! aws ecs describe-clusters --clusters $ECS_CLUSTER --query 'clusters[0].status' --output text | grep -q "ACTIVE"; then
            echo "Creating ECS cluster $ECS_CLUSTER..."
            aws ecs create-cluster --cluster-name $ECS_CLUSTER
          else
            echo "ECS cluster $ECS_CLUSTER already exists."
          fi

      - name: Register ECS task definition
        id: register_task
        run: |
          TASK_DEF_JSON=$(cat <<EOF
{
  "family": "$ECS_SERVICE",
  "networkMode": "awsvpc",
  "requiresCompatibilities": ["FARGATE"],
  "cpu": "256",
  "memory": "512",
  "executionRoleArn": "$EXECUTION_ROLE_ARN",
  "taskRoleArn": "$TASK_ROLE_ARN",
  "containerDefinitions": [
    {
      "name": "$ECS_SERVICE",
      "image": "$ECR_PRIVATE_URI:$IMAGE_TAG",
      "essential": true,
      "portMappings": [
        {
          "containerPort": 80,
          "hostPort": 80
        }
      ]
    }
  ]
}
EOF
)
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$TASK_DEF_JSON" --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Ensure ECS service exists or update
        run: |
          if ! aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].status' --output text | grep -q "ACTIVE"; then
            echo "Creating ECS service $ECS_SERVICE..."
            aws ecs create-service \
              --cluster $ECS_CLUSTER \
              --service-name $ECS_SERVICE \
              --task-definition $TASK_DEF_ARN \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_IDS }}],securityGroups=[${{ secrets.SECURITY_GROUP_IDS }}],assignPublicIp=ENABLED}"
          else
            echo "Updating ECS service $ECS_SERVICE with new task definition..."
            aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $TASK_DEF_ARN --force-new-deployment
          fi
