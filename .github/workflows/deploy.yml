name: Full CI/CD Frontend + Backend

on:
  push:
    branches:
      - main
      - 'frontend/**'
      - 'backend/**'

jobs:
  frontend-build:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      S3_STATIC_BUCKET: ${{ secrets.S3_STATIC_BUCKET }}
      S3_IMAGE_BUCKET: ${{ secrets.S3_IMAGE_BUCKET }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd public
          mv .env.example .env
          yarn

      - name: Build frontend
        run: |
          cd public
          CI=false yarn build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload frontend build to S3
        run: |
          aws s3 sync public/build s3://$S3_STATIC_BUCKET --delete

      - name: Block public access on S3 buckets
        run: |
          for BUCKET in $S3_STATIC_BUCKET $S3_IMAGE_BUCKET; do
            aws s3api put-public-access-block --bucket "$BUCKET" \
              --public-access-block-configuration '{
                "BlockPublicAcls": true,
                "IgnorePublicAcls": true,
                "BlockPublicPolicy": true,
                "RestrictPublicBuckets": true
              }'
          done

      - name: Invalidate CloudFront cache if distribution exists
        run: |
          if [ -n "$CLOUDFRONT_DISTRIBUTION_ID" ] && [ "$CLOUDFRONT_DISTRIBUTION_ID" != "null" ]; then
            EXISTS=$(aws cloudfront get-distribution --id "$CLOUDFRONT_DISTRIBUTION_ID" --query 'Distribution.Id' --output text 2>/dev/null || echo "")
            if [ -n "$EXISTS" ]; then
              echo "Invalidating CloudFront distribution $CLOUDFRONT_DISTRIBUTION_ID..."
              aws cloudfront create-invalidation \
                --distribution-id "$CLOUDFRONT_DISTRIBUTION_ID" \
                --paths "/*"
            else
              echo "CloudFront distribution ID $CLOUDFRONT_DISTRIBUTION_ID does not exist. Skipping invalidation."
            fi
          else
            echo "CloudFront distribution ID not set or null. Skipping invalidation."
          fi

  backend-build:
    needs: frontend-build
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_PRIVATE_URI: ${{ secrets.ECR_PRIVATE_URI }}
      ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
      ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
      IMAGE_TAG: ${{ github.sha }}
      TASK_ROLE_ARN: ${{ secrets.ECS_TASK_ROLE_ARN }}
      EXECUTION_ROLE_ARN: ${{ secrets.ECS_EXECUTION_ROLE_ARN }}
      SUBNET_IDS: ${{ secrets.SUBNET_IDS }}
      SECURITY_GROUP_IDS: ${{ secrets.SECURITY_GROUP_IDS }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_PRIVATE_URI

      - name: Build Docker image
        run: docker compose build --no-cache

      - name: Tag Docker image
        run: |
          docker tag react_backend_api:latest $ECR_PRIVATE_URI:$IMAGE_TAG
          docker tag react_backend_api:latest $ECR_PRIVATE_URI:latest

      - name: Push Docker image
        run: |
          docker push $ECR_PRIVATE_URI:$IMAGE_TAG
          docker push $ECR_PRIVATE_URI:latest

      - name: Ensure ECS cluster exists
        run: |
          CLUSTER_STATUS=$(aws ecs describe-clusters --clusters $ECS_CLUSTER --query 'clusters[0].status' --output text)
          if [ "$CLUSTER_STATUS" != "ACTIVE" ]; then
            echo "Creating ECS cluster $ECS_CLUSTER..."
            aws ecs create-cluster --cluster-name $ECS_CLUSTER
          else
            echo "ECS cluster exists."
          fi

      - name: Register ECS task definition
        id: register_task
        run: |
          TASK_DEF_JSON=$(jq -n \
            --arg FAMILY "$ECS_SERVICE" \
            --arg IMAGE "$ECR_PRIVATE_URI:$IMAGE_TAG" \
            --arg EXEC_ROLE "$EXECUTION_ROLE_ARN" \
            --arg TASK_ROLE "$TASK_ROLE_ARN" \
            '{
              family: $FAMILY,
              networkMode: "awsvpc",
              requiresCompatibilities: ["FARGATE"],
              cpu: "256",
              memory: "512",
              executionRoleArn: $EXEC_ROLE,
              taskRoleArn: $TASK_ROLE,
              containerDefinitions: [
                {
                  name: $FAMILY,
                  image: $IMAGE,
                  essential: true,
                  portMappings: [{containerPort:80,hostPort:80}]
                }
              ]
            }')
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$TASK_DEF_JSON" --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Ensure ECS service exists or update
        run: |
          SERVICE_STATUS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].status' --output text)
          if [ "$SERVICE_STATUS" != "ACTIVE" ]; then
            echo "Creating ECS service $ECS_SERVICE..."
            aws ecs create-service \
              --cluster $ECS_CLUSTER \
              --service-name $ECS_SERVICE \
              --task-definition $TASK_DEF_ARN \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets:[$SUBNET_IDS],securityGroups:[$SECURITY_GROUP_IDS],assignPublicIp:ENABLED}"
          else
            echo "Updating ECS service $ECS_SERVICE..."
            aws ecs update-service \
              --cluster $ECS_CLUSTER \
              --service $ECS_SERVICE \
              --task-definition $TASK_DEF_ARN \
              --force-new-deployment
