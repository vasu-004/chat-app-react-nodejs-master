name: Deploy React App to S3 + CloudFront (Docker Compose)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ✅ Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # ✅ Install Docker + Docker Compose
      - name: Verify Docker and Compose
        run: |
          docker --version
          docker compose version

      # ✅ Build React app with Docker Compose (using --no-cache)
      - name: Build React App using Docker Compose
        run: |
          docker compose build --no-cache

      # ✅ Extract build artifacts directly from the built container
      - name: Extract build files from container
        run: |
          # Start the services to build the React app
          docker compose up -d
          
          # Wait for the build to complete
          sleep 30
          
          # Copy build files directly from the running container
          docker compose cp react-app:/app/build ./extracted-build 2>/dev/null || \
          docker compose cp frontend:/app/build ./extracted-build 2>/dev/null || \
          docker compose cp web:/app/build ./extracted-build 2>/dev/null || \
          (echo "Trying alternative container names..." && \
           CONTAINER_ID=$(docker ps -q --filter "name=react") && \
           docker cp $CONTAINER_ID:/app/build ./extracted-build)
          
          # Verify the build files
          ls -la extracted-build/
          
          # Stop the containers
          docker compose down

      # ✅ Alternative method: Build and extract using multi-stage build
      - name: Alternative extract method
        if: failure() && steps.extract-build.outcome == 'failure'
        run: |
          # Build and create container in one step
          docker compose run --name temp-build-container react-app npm run build
          docker cp temp-build-container:/app/build ./extracted-build
          docker rm temp-build-container
          ls -la extracted-build/

      # ✅ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # ✅ Create S3 bucket
      - name: Create S3 bucket
        run: |
          BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"
          if [ -z "$BUCKET_NAME" ]; then
            BUCKET_NAME="my-react-app-${{ github.run_id }}"
          fi
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
          
          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            aws s3api create-bucket \
              --bucket "$BUCKET_NAME" \
              --region ${{ secrets.AWS_REGION }} \
              --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}
          fi

      # ✅ Upload build to S3
      - name: Upload build to S3
        run: |
          aws s3 sync ./extracted-build/ s3://$BUCKET_NAME --delete

      # ✅ Invalidate CloudFront cache
      - name: Invalidate CloudFront cache
        if: secrets.CLOUDFRONT_DISTRIBUTION_ID != ''
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      # ✅ Cleanup
      - name: Cleanup Docker
        run: |
          docker compose down --remove-orphans
          docker system prune -f
