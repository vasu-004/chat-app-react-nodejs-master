name: Deploy React Frontend to S3 + CloudFront

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Verify Docker & Docker Compose
      - name: Verify Docker and Compose
        run: |
          docker --version
          docker compose version

      # 3️⃣ Build React frontend using Docker Compose
      - name: Build frontend
        working-directory: ./  # root of project
        run: docker compose build --no-cache front

      # 4️⃣ Extract React build from Docker image
      - name: Extract React build
        working-directory: ./  # root of project
        run: |
          # Get full image name generated by Docker Compose
          IMAGE_NAME=$(docker images --format "{{.Repository}}" | grep "-front")
          if [ -z "$IMAGE_NAME" ]; then
            echo "❌ Frontend image not found!"
            docker images
            exit 1
          fi

          IMAGE_ID=$(docker images -q $IMAGE_NAME)
          echo "Frontend image ID: $IMAGE_ID"

          # Create temporary container from image
          CONTAINER_ID=$(docker create $IMAGE_ID)

          # Copy /app/build to host
          docker cp $CONTAINER_ID:/app/build ./build

          # Remove temporary container
          docker rm $CONTAINER_ID

          ls -l build

      # 5️⃣ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 6️⃣ Create S3 bucket if it doesn't exist
      - name: Create S3 bucket
        run: |
          BUCKET_NAME="my-react-frontend-${{ github.run_id }}"
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV

          if ! aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
            aws s3api create-bucket \
              --bucket $BUCKET_NAME \
              --region ${{ secrets.AWS_REGION }} \
              --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}
          fi

          aws s3api put-public-access-block \
            --bucket $BUCKET_NAME \
            --public-access-block-configuration '{
              "BlockPublicAcls": true,
              "IgnorePublicAcls": true,
              "BlockPublicPolicy": true,
              "RestrictPublicBuckets": true
            }'

      # 7️⃣ Attach S3 bucket policy for CloudFront
      - name: Attach bucket policy
        run: |
          BUCKET_NAME=$BUCKET_NAME
          CLOUDFRONT_ID=${{ secrets.CLOUDFRONT_ID }}
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          CLOUDFRONT_ARN="arn:aws:cloudfront::${ACCOUNT_ID}:distribution/${CLOUDFRONT_ID}"

          POLICY=$(cat <<EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "AllowCloudFrontServicePrincipalRead",
                "Effect": "Allow",
                "Principal": {
                  "Service": "cloudfront.amazonaws.com"
                },
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::$BUCKET_NAME/*",
                "Condition": {
                  "StringEquals": {
                    "AWS:SourceArn": "$CLOUDFRONT_ARN"
                  }
                }
              }
            ]
          }
          EOF
          )

          echo "$POLICY" > bucket-policy.json
          aws s3api put-bucket-policy --bucket $BUCKET_NAME --policy file://bucket-policy.json

      # 8️⃣ Upload React build to S3
      - name: Upload build to S3
        run: |
          aws s3 sync ./build/ s3://$BUCKET_NAME --delete

      # 9️⃣ Invalidate CloudFront cache
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_ID }} \
            --paths "/*"
